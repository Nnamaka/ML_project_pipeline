# So far we have considered purely random sampling methods. This is generally
# fine if your dataset is large enough (especially relative to the number of
# attributes), but if it is not, you run the risk of introducing a significant
# sampling bias. When a survey company decides to call 1,000 people to ask
# them a few questions, they donâ€™t just pick 1,000 people randomly in a phone
# book. They try to ensure that these 1,000 people are representative of the
# whole population. For example, the US population is 51.3% females and
# 48.7% males, so a well-conducted survey in the US would try to maintain this
# ratio in the sample: 513 female and 487 male. This is called stratified
# sampling: the population is divided into homogeneous subgroups called
# strata, and the right number of instances are sampled from each stratum to
# guarantee that the test set is representative of the overall population. If the
# people running the survey used purely random sampling, there would be about
# a 12% chance of sampling a skewed test set that was either less than 49%
# female or more than 54% female. Either way, the survey results would be
# significantly biased.

#-------------------------------------------------------
# we can use the code below to create an income category attribute
# with five categories(labeled from 1 to 5): category 1 ranges 
# from 0 to 1.5(i.e less than 15,000), category 2 from 1.5 to 3, and
# so on.

housing["income_cat"] = pd.cut(housing["median_income"],bins=
[0.,1.5,3.0,4.5,6.,np.inf], labels=[1,2,3,4,5])

housing["income_cat"].hist()

# now to do stratified sampling based on the income category
# we can use Scikit-learn's "StratifiedShuffleSplit" class

from sklearn.model_selection import StratifiedShuffleSplit

split = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)
for train_index, test_index in split.split(housing,housing["income_cat"]):
    strat_train_set = housing.loc[train_index]
    strat_test_set = housing.loc[test_index]


# Now by looking at the income category proportions in the test set
# with the code below, we can see that it matches the stratified data
# in the overall dataset.
# therefore the testset generated by using stratified sampling has
# income category proportions almost identical to those in the full
# dataset, whereas the test set generated using purely random sampling
# is skewed
strat_test_set["income_cat"].value_counts() / len(strat_test_set)